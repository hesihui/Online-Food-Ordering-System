{"version":3,"sources":["utils.js","components/LoginForm.js","components/FoodList.js","components/MyCart.js","components/Footer.js","components/SignupForm.js","App.js","reportWebVitals.js","index.js"],"names":["login","credential","loginUrl","username","password","fetch","method","headers","credentials","then","response","status","Error","signup","data","body","JSON","stringify","LoginForm","state","loading","onFinish","values","setState","message","success","props","onSuccess","catch","err","error","finally","name","className","this","Item","rules","required","prefix","UserOutlined","placeholder","Password","LockOutlined","type","htmlType","React","Component","Option","Select","AddToCartButton","itemId","useState","setLoading","title","icon","PlusOutlined","onClick","addItemToCart","FoodList","curRest","setCurRest","loadingRest","setLoadingRest","restaurants","setRestaurants","foodData","setFoodData","useEffect","json","restId","value","style","width","onChange","onSelect","map","item","id","marginTop","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","extra","src","imageUrl","alt","height","display","price","Text","Typography","MyCart","cartVisible","setCartVisible","cartData","setCartData","checking","setChecking","onCloseDrawer","shape","onClose","visible","footer","justifyContent","strong","totalPrice","marginRight","disabled","orderItemList","length","itemLayout","Meta","menuItem","description","Footer","SignupForm","displayModal","handleCancel","signupOnClick","render","onCancel","destroyOnClose","initialValues","remember","preserve","Header","Layout","Content","Title","App","authed","setAuthed","level","color","lineHeight","marginBottom","padding","maxHeight","overflowY","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.825da51b.chunk.js","sourcesContent":["// includes all requests to the server\n// config req obj\n// login api -> make a request to the server\nexport const login = (credential) => {\n    const loginUrl = `/login?username=${credential.username}&password=${credential.password}`;\n\n    return fetch(loginUrl, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n    }).then((response) => {\n        if (response.status < 200 || response.status >= 300\n        ) {\n            throw Error(\"Fail to log in\");\n        }\n    });\n};\n\nexport const signup = (data) => {\n    const signupUrl = \"/signup\";\n\n    return fetch(signupUrl, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n    }).then((response) => {\n        if (response.status < 200 || response.status >= 300) {\n            throw Error(\"Fail to sign up\");\n        }\n    });\n};\n\nexport const getMenus = (restId) => {\n    return fetch(`/restaurant/${restId}/menu`).then((response) => {\n        if (response.status < 200 || response.status >= 300\n        ) {\n            throw Error(\"Fail to get menus\");\n        }\n\n        return response.json();\n    });\n};\n\nexport const getRestaurants = () => {\n    return fetch(\"/restaurants\").then((response) => {\n        if (response.status < 200 || response.status >= 300\n        ) {\n            throw Error(\"Fail to get restaurants\");\n        }\n\n        return response.json();\n    });\n};\n\nexport const getCart = () => {\n    return fetch(\"/cart\").then((response) => {\n        if (response.status < 200 || response.status >= 300\n        ) {\n            throw Error(\"Fail to get shopping cart data\");\n        }\n\n        return response.json();\n    });\n};\n\nexport const checkout = () => {\n    return fetch(\"/checkout\").then((response) => {\n        if (response.status < 200 || response.status >= 300\n        ) {\n            throw Error(\"Fail to checkout\");\n        }\n    });\n};\n\nexport const addItemToCart = (itemId) => {\n    return fetch(`/order/${itemId}`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n    }).then((response) => {\n        //如果response的没有值，返回的是一个undefined\n        if (response.status < 200 || response.status >= 300\n        ) {\n            throw Error(\"Fail to add menu item to shopping cart\");\n        }\n    });\n};","import { Button, Form, Input, message } from \"antd\";\n// import {useRef, useEffect} from \"react\";\nimport React from \"react\";\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\";\nimport { login } from \"../utils\";\n\n//step1: set loading true\n//2: send login request(call login api) to the server\n//3:deal with login status: app logged in or not\n//4:set loading false\nclass LoginForm extends React.Component {\n    state = {\n        loading: false\n    }\n\n    onFinish = (values) => {\n        // step1: set loading true\n        // step2: send login request( call login api ) to the server\n        // step3: deal with login status -> logged in or not\n        // step4: set loading false\n        this.setState({ loading: true });\n        login(values)\n            .then( () => {\n                // show logged in\n                message.success('Login Successful');\n                this.props.onSuccess();\n            })\n            .catch( err => {\n                // show err\n                message.error(err.message );\n            })\n            .finally( () => {\n                this.setState({ loading: false })\n            })\n    };\n\n    render() {\n        return (\n            <Form\n                name=\"normal_login\"\n                className=\"login-form\"\n                onFinish={this.onFinish}\n            >\n                <Form.Item\n                    name=\"username\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please input your Username!',\n                        }\n                    ]}\n                >\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\n                </Form.Item>\n                <Form.Item\n                    name=\"password\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please input your Password!',\n                        },\n                    ]}\n                >\n                    <Input.Password\n                        prefix={<LockOutlined />}\n                        placeholder=\"Password\"\n                    />\n                </Form.Item>\n\n                <Form.Item>\n                    <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        loading={ this.state.loading }\n                    >\n                        Log in\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\n// export function useIsMounted() {\n//     const isMounted = useRef(false);\n//\n//     useEffect(() => {\n//         isMounted.current = true;\n//         return () => isMounted.current = false;\n//     }, []);\n//\n//     return isMounted;\n// }\n\nexport default LoginForm;\n\n// class LoginForm extends React.Component {\n//     state = {\n//         loading: false,\n//     };\n//\n//     onFinish = (data) => {\n//         this.setState({\n//             loading: true,\n//         });\n//         login(data)\n//             .then(() => {\n//                 message.success(`Login Successful`);\n//                 this.props.onSuccess();\n//             })\n//             .catch((err) => {\n//                 message.error(err.message);\n//             })\n//             .finally(() => {\n//                 this.setState({\n//                     loading: false,\n//                 });\n//             });\n//     };\n//\n//     render = () => {\n//         return (\n//             <Form\n//                 name=\"normal_login\"\n//                 onFinish={this.onFinish}\n//                 style={{\n//                     width: 300,\n//                     margin: \"auto\",\n//                 }}\n//             >\n//                 <Form.Item\n//                     name=\"username\"\n//                     rules={[{ required: true, message: \"Please input your Username!\" }]}\n//                 >\n//                     <Input prefix={<UserOutlined />} placeholder=\"Username\" />\n//                 </Form.Item>\n//                 <Form.Item\n//                     name=\"password\"\n//                     rules={[{ required: true, message: \"Please input your Password!\" }]}\n//                 >\n//                     <Input.Password prefix={<LockOutlined />} placeholder=\"Password\" />\n//                 </Form.Item>\n//\n//                 <Form.Item>\n//                     <Button type=\"primary\" htmlType=\"submit\" loading={this.state.loading}>\n//                         Login\n//                     </Button>\n//                 </Form.Item>\n//             </Form>\n//         );\n//     };\n// }\n//\n// export default LoginForm;\n//\n\n// class LoginForm extends Component {\n//     state = {\n//         loading: false\n//     }\n//\n//     onFinish = (values) => {\n//         //step1: set loading true\n//         //2: send login request(call login api) to the server\n//         //3:deal with login status: app logged in or not\n//         //4:set loading false\n//         this.setState({loading: true});\n//         console.log('Received values of form: ', values);\n//         login(values)\n//             .then( () => {\n//             //show logged in\n//              message.success('Login successful');\n//              this.props.onSuccess();\n//         }).catch( err => {\n//             //show err\n//             message.error(err.message);\n//         }).finally(() => {\n//             this.setState({loading: false})\n//         })\n//     };\n//\n//     render() {\n//         return (\n//             <Form\n//                 name=\"normal_login\"\n//                 className=\"login-form\"\n//                 onFinish={this.onFinish}\n//             >\n//                 <Form.Item\n//                     name=\"username\"\n//                     rules={[\n//                         {\n//                             required: true,\n//                             message: 'Please input your Username!',\n//                         },\n//                     ]}\n//                 >\n//                     <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\n//                 </Form.Item>\n//                 <Form.Item\n//                     name=\"password\"\n//                     rules={[\n//                         {\n//                             required: true,\n//                             message: 'Please input your Password!',\n//                         },\n//                     ]}\n//                 >\n//                     <Input.Password\n//                         prefix={<LockOutlined />}\n//                         placeholder=\"Password\"\n//                     />\n//                 </Form.Item>\n//\n//                 <Form.Item>\n//                     <Button\n//                         type=\"primary\"\n//                         htmlType=\"submit\"\n//                         loading={this.state.loading}\n//                     >\n//                         Log in\n//                     </Button>\n//                 </Form.Item>\n//             </Form>\n//         );\n//     }\n// }\n//\n// export default LoginForm;\n","import React, {useState, useEffect} from 'react';\nimport { Select, message, List, Card, Tooltip, Button } from 'antd';\nimport { getRestaurants, getMenus, addItemToCart } from '../utils';\nimport { PlusOutlined } from '@ant-design/icons';\n\nconst { Option } = Select;\n\nfunction AddToCartButton({itemId}) {\n    const [loading, setLoading] = useState(false);\n\n    const AddToCart = () => {\n        // add selected menu to the cart\n        // step1: set loading to true\n        // step2: add menu to cart and inform the server\n        setLoading(true);\n        addItemToCart(itemId)\n            .then(() => message.success(`Successfully add item`))\n            .catch((err) => message.error(err.message))\n            .finally(() => {\n                setLoading(false);\n            });\n\n    }\n    return (\n        <Tooltip title=\"Add to shopping cart\">\n            <Button\n                loading={loading}\n                type=\"primary\"\n                icon={<PlusOutlined />}\n                onClick={AddToCart}\n            />\n        </Tooltip>\n    )\n}\n\nfunction FoodList(props) {\n    // current selected option\n    const [curRest, setCurRest] = useState();\n    // loading restaurant status\n    const [loadingRest, setLoadingRest] = useState(false);\n    // restaurant list\n    const [restaurants, setRestaurants] = useState([]);\n    // loading restaurant menu\n    const [loading, setLoading] = useState(false);\n    // store menu status\n    const [foodData, setFoodData] = useState([]);\n\n    // fetch restaurant list\n    useEffect(() => {\n        // step1: set loading restaurant = true\n        // step2: fetch restaurant list from the server\n        setLoadingRest(true);\n        getRestaurants()\n            .then( response => {\n                setRestaurants(response);\n            })\n            .catch( err => {\n                message.error(err.message);\n            })\n            .finally( () => {\n                setLoadingRest(false);\n            })\n    }, []);\n\n    // fetch menu of current selected restaurant\n    useEffect( () => {\n        // step1: set loading menu status\n        // step2: fetch menu from the server\n        if(curRest) {\n            setLoading(true);\n            getMenus(curRest)\n                .then( response => {\n                    setFoodData(response);\n                })\n                .catch( err => {\n                    message.error(err.message);\n                })\n                .finally( () => {\n                    setLoading(false);\n                })\n        }\n    }, [curRest])\n\n    return (\n        <>\n            <Select\n                value={curRest}\n                loading={loadingRest}\n                style={{ width: 300 }}\n                placeholder=\"Select a restaurant\"\n                onChange={ () => {} }\n                onSelect={ value => setCurRest(value) }\n            >\n                {\n                    restaurants.map(\n                        item => <Option key={item.id} value={item.id}>{item.name}</Option>\n                    )\n                }\n            </Select>\n            {\n                curRest && (\n                    <List\n                        style={{ marginTop: 20 }}\n                        loading={ loading }\n                        grid={{\n                            gutter: 16,\n                            xs: 1,\n                            sm: 2,\n                            md: 4,\n                            lg: 4,\n                            xl: 3,\n                            xxl: 3,\n                        }}\n                        dataSource={foodData}\n                        renderItem={item => (\n                            <List.Item>\n                                <Card title={item.name}\n                                      extra={<AddToCartButton itemId={item.id}/>}\n                                >\n                                    <img src={item.imageUrl}\n                                         alt={item.name}\n                                         style={{ height: 'auto', width: \"100%\", display: \"block\" }}\n                                    />\n                                    Price: { item.price }\n                                </Card>\n                            </List.Item>\n                        )}\n                    />\n                )\n            }\n        </>\n    );\n}\n\nexport default FoodList;\n\n// import { Button, Card, List, message, Select, Tooltip } from \"antd\";\n// import { useEffect, useState } from \"react\";\n// import { addItemToCart, getMenus, getRestaurants } from \"../utils\";\n// import { PlusOutlined } from \"@ant-design/icons\";\n//\n// const { Option } = Select;\n//\n// //定义特殊的添加函数\n// //itemID实际上itemID.props，只是这里做了一个解构\n// //通知后端往cart中增加数据，不需要用useEffect从后端获取数据\n// const AddToCartButton = ({ itemId }) => {\n//     const [loading, setLoading] = useState(false);\n//\n//     //add seleted menu to the cart\n//     // step1: set loading to true\n//     // step2: add menu to cart and inform the server\n//     const AddToCart = () => {\n//         setLoading(true);\n//         addItemToCart(itemId)\n//             .then(() => message.success(`Successfully add item`))\n//             .catch((err) => message.error(err.message))\n//             .finally(() => {\n//                 setLoading(false);\n//             });\n//     };\n//\n//     return (\n//         <Tooltip title=\"Add to shopping cart\">\n//             <Button\n//                 loading={loading}\n//                 type=\"primary\"\n//                 icon={<PlusOutlined />}\n//                 onClick={AddToCart}\n//             />\n//         </Tooltip>\n//     );\n// };\n//\n//\n// const FoodList = () => {\n//     //current selected option\n//     const [curRest, setCurRest] = useState();\n//     // store food menu\n//     const [foodData, setFoodData] = useState([]);\n//     //rest list\n//     const [restaurants, setRestaurants] = useState([]);\n//     //loading rest menu\n//     const [loading, setLoading] = useState(false);\n//     //current restaurant selected props\n//     const [loadingRest, setLoadingRest] = useState(false);\n//\n//     useEffect(() => {\n//         setLoadingRest(true);\n//         getRestaurants()\n//             .then((data) => {\n//                 setRestaurants(data);\n//             })\n//             .catch((err) => {\n//                 message.error(err.message);\n//             })\n//             .finally(() => {\n//                 setLoadingRest(false);\n//             });\n//     }, []);\n//\n//     useEffect(() => {\n//         if (curRest) {\n//             setLoading(true);\n//             getMenus(curRest)\n//                 .then((data) => {\n//                     setFoodData(data);\n//                 })\n//                 .catch((err) => {\n//                     message.error(err.message);\n//                 })\n//                 .finally(() => {\n//                     setLoading(false);\n//                 });\n//         }\n//     }, [curRest]);\n//\n//     return (\n//         <>\n//             <Select\n//                 value={curRest}\n//                 onSelect={(value) => setCurRest(value)}\n//                 placeholder=\"Select a restaurant\"\n//                 loading={loadingRest}\n//                 style={{ width: 300 }}\n//                 onChange={() => {}}\n//             >\n//                 {restaurants.map((item) => {\n//                     return <Option key={item.key} value={item.id}>{item.name}</Option>;\n//                 })}\n//             </Select>\n//             {/*curRest必须要为真才能做解析来的事情*/}\n//             {curRest && (\n//                 <List\n//                     style={{ marginTop: 20 }}\n//                     loading={loading}\n//                     grid={{\n//                         gutter: 16,\n//                         xs: 1,\n//                         sm: 2,\n//                         md: 4,\n//                         lg: 4,\n//                         xl: 3,\n//                         xxl: 3,\n//                     }}\n//                     dataSource={foodData}\n//                     renderItem={(item) => (\n//                         <List.Item>\n//                             <Card title={item.name}\n//                                 extra={<AddToCartButton itemId={item.id} />}\n//                             >\n//                                 <img src={item.imageUrl}\n//                                     alt={item.name}\n//                                     style={{ height: \"auto\", width: \"100%\", display: \"block\" }}\n//                                 />\n//                                 {`Price: ${item.price}`}\n//                             </Card>\n//                         </List.Item>\n//                     )}\n//                 />\n//             )}\n//         </>\n//     );\n// };\n//\n// export default FoodList;\n\n\n// import { Button, Card, List, message, Select, Tooltip } from \"antd\";\n// import { useEffect, useState } from \"react\";\n// import { addItemToCart, getMenus, getRestaurants } from \"../utils\";\n// import { PlusOutlined } from \"@ant-design/icons\";\n//\n// const { Option } = Select;\n//\n// const AddToCartButton = ({itemId }) => {\n//     const AddToCart = () => {\n//         setLoading(true);\n//         addItemToCart(itemId)\n//             .then(() => message.success(`Successfully add item`))\n//             .catch((err) => message.error(err.message))\n//             .finally(() => {\n//                 setLoading(false);\n//             });\n//     };\n//\n//     return (\n//         <Tooltip title=\"Add to shopping cart\">\n//             <Button\n//                 loading={loading}\n//                 type=\"primary\"\n//                 icon={<PlusOutlined />}\n//                 onClick={AddToCart}\n//             />\n//         </Tooltip>\n//     );\n// };\n//\n// function FoodList (props) {\n//     //current seleted option\n//     const [curRest, setCurRest] = useState();\n//     //current resturant seleted props\n//     const [loadingRest, setLoadingRest] = useState(false);\n//     //rest list\n//     const [restaurants, setRestaurants] = useState([]);\n//     //loading rest menu\n//     const [loading, setLoading] = useState(false);\n//     // store food menu\n//     const [foodData, setFoodData] = useState([]);\n//\n//     //fetech resturant list\n//     useEffect(() => {\n//         //setp1: set loading rest = true\n//         //step2: fetch rest list from the server\n//         setLoadingRest(true);\n//         //得到rest数据\n//         //拿到的data response使用setrest设置拿到的reponse\n//         getRestaurants()\n//             .then((data) => {\n//                 setRestaurants(data);\n//             })\n//             .catch((err) => {\n//                 message.error(err.message);\n//             })\n//             .finally(() => {\n//                 setLoadingRest(false);\n//             }); //将loading状态改为false，停止loading\n//     }, []);\n//\n//     //fetch menu of rest\n//     useEffect(() => {\n//         //step1:set loading menu status\n//         //step2: fetech menu from the server\n//         if (curRest) { //if cur rest exists\n//             setLoading(true);\n//             getMenus(curRest)\n//                 .then((data) => {\n//                     setFoodData(data);\n//                 })\n//                 .catch((err) => {\n//                     message.error(err.message);\n//                 })\n//                 .finally(() => {\n//                     setLoading(false);\n//                 });\n//         }\n//     }, [curRest]);\n//\n//     return (\n//         <>\n//             <Select\n//                 value={curRest}\n//                 onSelect={(value) => setCurRest(value)}\n//                 placeholder=\"Select a restaurant\"\n//                 loading={loadingRest}\n//                 style={{ width: 300 }}\n//                 onChange={() => {}}\n//             >\n//                 {restaurants.map((item) => {\n//                     return <Option value={item.id}>{item.name}</Option>;\n//                 })}\n//                {/*   用map遍历所有函数 */}\n//             </Select>\n//             {curRest && (\n//                 <List\n//                     style={{ marginTop: 20 }}\n//                     loading={loading}\n//                     grid={{\n//                         gutter: 16,\n//                         xs: 1,\n//                         sm: 2,\n//                         md: 4,\n//                         lg: 4,\n//                         xl: 3,\n//                         xxl: 3,\n//                     }}\n//                     dataSource={foodData}\n//                     renderItem={(item) => (\n//                         <List.Item>\n//                             <Card\n//                                 title={item.name}\n//                                 extra={<AddToCartButton itemId={item.id} />}\n//                             >\n//                                 <img\n//                                     src={item.imageUrl}\n//                                     alt={item.name}\n//                                     style={{ height: 340, width: \"100%\", display: \"block\" }}\n//                                 />\n//                                 {`Price: ${item.price}`}\n//                             </Card>\n//                         </List.Item>\n//                     )}\n//                 />\n//             )}\n//         </>\n//     );\n// };\n//\n// export default FoodList;\n//\n","import { Button, Drawer, List, message, Typography } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { checkout, getCart } from \"../utils\";\n\nconst { Text } = Typography;\n\nconst MyCart = () => {\n    const [cartVisible, setCartVisible] = useState(false);\n    const [cartData, setCartData] = useState();\n    const [loading, setLoading] = useState(false);\n    const [checking, setChecking] = useState(false);\n\n    useEffect(() => {\n        if (!cartVisible) {\n            return;\n        }\n\n        setLoading(true);\n        getCart()\n            .then((data) => {\n                setCartData(data);\n            })\n            .catch((err) => {\n                message.error(err.message);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, [cartVisible]);\n\n    const onCheckOut = () => {\n        setChecking(true);\n        checkout()\n            .then(() => {\n                message.success(\"Successfully checkout\");\n                setCartVisible(false);\n            })\n            .catch((err) => {\n                message.error(err.message);\n            })\n            .finally(() => {\n                setChecking(false);\n            });\n    };\n\n    const onCloseDrawer = () => {\n        setCartVisible(false);\n    };\n\n    const onOpenDrawer = () => {\n        setCartVisible(true);\n    };\n\n    return (\n        <>\n            <Button type=\"primary\" shape=\"round\" onClick={onOpenDrawer}>\n                Cart\n            </Button>\n            <Drawer\n                title=\"My Shopping Cart\"\n                onClose={onCloseDrawer}\n                visible={cartVisible}\n                width={520}\n                footer={\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\",\n                        }}\n                    >\n                        <Text strong={true}>{`Total price: $${cartData?.totalPrice}`}</Text>\n                        <div>\n                            <Button onClick={onCloseDrawer} style={{ marginRight: 8 }}>\n                                Cancel\n                            </Button>\n                            <Button\n                                onClick={onCheckOut}\n                                type=\"primary\"\n                                loading={checking}\n                                disabled={loading || cartData?.orderItemList.length === 0}\n                            >\n                                Checkout\n                            </Button>\n                        </div>\n                    </div>\n                }\n            >\n                <List\n                    loading={loading}\n                    itemLayout=\"horizontal\"\n                    dataSource={cartData?.orderItemList}\n                    renderItem={(item) => (\n                        <List.Item>\n                            <List.Item.Meta\n                                title={item.menuItem.name}\n                                description={`$${item.price}`}\n                            />\n                        </List.Item>\n                    )}\n                />\n            </Drawer>\n        </>\n    );\n};\n\nexport default MyCart;\n\n\n// import { Button, Drawer, List, message, Typography } from \"antd\";\n// import { useEffect, useState } from \"react\";\n// import { checkout, getCart } from \"../utils\";\n//\n// const { Text } = Typography; //Text需要从typography引入\n//\n// const MyCart = () => {\n//     //display/hide drawer\n//     const [cartVisible, setCartVisible] = useState(false);\n//     // state -> cart data， 用于存放cart的数据\n//     const [cartData, setCartData] = useState();\n//     //set loading\n//     const [loading, setLoading] = useState(false);\n//     // set checking loading\n//     const [checking, setChecking] = useState(false);\n//\n//     //当cart visible被修改时触发数据交互，因为【cartVisible]作为dependent value\n//     useEffect(() => {\n//         // set loading\n//         // fetch items added in the cart from the server\n//         if (!cartVisible) {\n//             return;\n//         }\n//         setLoading(true);\n//         getCart()\n//             .then((data) => {\n//                 setCartData(data);\n//             })\n//             .catch((err) => {\n//                 message.error(err.message);\n//             })\n//             .finally(() => {\n//                 setLoading(false);\n//             });\n//     }, [cartVisible]);\n//\n//     const onCheckOut = () => {\n//\n//         setChecking(true);\n//         // inform the server to checkout\n//         checkout()\n//             .then(() => {\n//                 message.success(\"Successfully checkout\");\n//                 setCartVisible(false);\n//                 //当check out完成后需要关闭drawer\n//             })\n//             .catch((err) => {\n//                 message.error(err.message);\n//             })\n//             .finally(() => {\n//                 setChecking(false);\n//             });\n//     };\n//\n//     //设置drawer的值\n//     const onCloseDrawer = () => {\n//         setCartVisible(false);\n//     };\n//     const onOpenDrawer = () => {\n//         setCartVisible(true);\n//     };\n//\n//     // visible的属性控制是否看见 drawer\n//     // 两个button\n//     // button1：onCloseDrawer， 为了cancel\n//     // button2： check out\n//     return (\n//         <>\n//             <Button type=\"primary\" shape=\"round\" onClick={onOpenDrawer}>\n//                 Cart\n//             </Button>\n//             <Drawer\n//                 title=\"My Shopping Cart\"\n//                 onClose={onCloseDrawer}\n//                 visible={cartVisible}\n//                 width={520}\n//                 footer={\n//                     <div\n//                         style={{\n//                             display: \"flex\",\n//                             justifyContent: \"space-between\",\n//                         }}\n//                     >\n//                         <Text strong={true}>{`Total price: $${cartData?.totalPrice}`}</Text>\n//                         <div>\n//                             <Button onClick={onCloseDrawer} style={{ marginRight: 8 }}>\n//                                 Cancel\n//                             </Button>\n//                             <Button\n//                                 onClick={onCheckOut}\n//                                 type=\"primary\"\n//                                 loading={checking}\n//                                 disabled={loading || cartData?.orderItemList.length === 0}\n//                             >\n//                                 Checkout\n//                             </Button>\n//                         </div>\n//                     </div>\n//                 }\n//             >\n//\n//                 <List\n//                     loading={loading}\n//                     itemLayout=\"horizontal\"\n//                     dataSource={cartData ? cartData.orderItemList : [] }\n//                     renderItem={(item) => (\n//                         <List.Item>\n//                             <List.Item.Meta\n//                                 title={item.menuItem.name}\n//                                 description={`$${item.price}`}\n//                             />\n//                         </List.Item>\n//                     )}\n//                 />\n//             </Drawer>\n//         </>\n//     );\n// };\n// //dataSource={cartData? cartData.orderItemList : []}\n// //如果cartData存在，就用orderitemlist，否则就用空数组\n//\n// export default MyCart;\n//\n","import React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                Demo Website Made by Sihui He\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n","import { Button, Form, Input, message, Modal } from \"antd\";\nimport React from \"react\";\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\";\nimport { signup } from \"../utils\";\n\nclass SignupForm extends React.Component {\n    state = {\n        displayModal: false,\n    };\n\n    handleCancel = () => {\n        this.setState({\n            displayModal: false,\n        });\n    };\n\n    signupOnClick = () => {\n        this.setState({\n            displayModal: true,\n        });\n    };\n\n    onFinish = (data) => {\n        signup(data)\n            .then(() => {\n                this.setState({\n                    displayModal: false,\n                });\n                message.success(`Successfully signed up`);\n            })\n            .catch((err) => {\n                message.error(err.message);\n            });\n    };\n\n    render = () => {\n        return (\n            <>\n                <Button shape=\"round\" type=\"primary\" onClick={this.signupOnClick} >\n                    Register\n                </Button>\n                <Modal\n                    title=\"Register\"\n                    visible={this.state.displayModal}\n                    onCancel={this.handleCancel}\n                    footer={null}\n                    destroyOnClose={true}\n                >\n                    <Form\n                        name=\"normal_register\"\n                        initialValues={{ remember: true }}\n                        onFinish={this.onFinish}\n                        preserve={false}\n                    >\n                        <Form.Item\n                            name=\"email\"\n                            rules={[{ required: true, message: \"Please input your email!\" }]}\n                        >\n                            <Input prefix={<UserOutlined />} placeholder=\"Email\" />\n                        </Form.Item>\n                        <Form.Item\n                            name=\"password\"\n                            rules={[\n                                { required: true, message: \"Please input your password!\" },\n                            ]}\n                        >\n                            <Input prefix={<LockOutlined />} placeholder=\"Password\" />\n                        </Form.Item>\n                        <Form.Item\n                            name=\"firstName\"\n                            rules={[\n                                { required: true, message: \"Please input your first name!\" },\n                            ]}\n                        >\n                            <Input placeholder=\"firstname\" />\n                        </Form.Item>\n                        <Form.Item\n                            name=\"lastName\"\n                            rules={[\n                                { required: true, message: \"Please input your last name!\" },\n                            ]}\n                        >\n                            <Input placeholder=\"lastname\" />\n                        </Form.Item>\n\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Register\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Modal>\n            </>\n        );\n    };\n}\n\nexport default SignupForm;","import { Layout, Typography } from \"antd\";\nimport { useState } from \"react\";\nimport LoginForm from \"./components/LoginForm\";\nimport FoodList from \"./components/FoodList\";\nimport MyCart from \"./components/MyCart\"\nimport Footer from \"./components/Footer\"\nimport SignupForm from \"./components/SignupForm\";\n\nconst { Header, Content } = Layout;\nconst { Title } = Typography;\n\nfunction App() {\n    const [authed, setAuthed] = useState(false);\n\n    return (\n        <Layout style={{ height: \"100vh\" }}>\n            <Header>\n                <div className=\"header\"\n                     style={{display: \"flex\",\n                         justifyContent: \"space-between\"}}>\n                    <Title\n                        level={2}\n                        style={{ color: \"white\",\n                            lineHeight: \"inherit\",\n                            marginBottom: 0 }}\n                    >\n                        DEMO: Online Food Ordering System\n                    </Title>\n                    {/*/!*如果登陆（authed）执行mycart组件*!/*/}\n                    <div>{authed ? <MyCart /> : <SignupForm />}</div>\n                </div>\n            </Header>\n            <Content\n                style={{\n                    padding: \"50px\",\n                    maxHeight: \"calc(100% - 64px)\",\n                    overflowY: \"auto\",\n                }}\n            >\n                {authed ? (\n                    <FoodList />\n                ) : (\n                    <LoginForm onSuccess={() => setAuthed(true)} />\n                )}\n            </Content>\n            <Footer />\n        </Layout>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}